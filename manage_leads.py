# -*- coding: utf-8 -*-
"""manage_leads.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17SW7vboXKWewJX_dR2He0aRRDArsexc4
"""

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt

data = pd.read_csv("/content/SampleData.csv", encoding= 'unicode_escape',index_col="Lead Number")

#data = data.dropna(axis=1)

data.describe()



#Lead scoring is an effective model that helps sales and marketing departments identify which prospects are potentially most valuable to the company and its current sales funnel. A lead scoring system only works when it is properly set up and used on a regular basis.

"""

data.info()

data.head(10)

"""#getting only required columns"""

newdata = data[["Prospect ID","Lead Origin","Lead Source","Do Not Email","Do Not Call","Lead Stage","Lead Score","Engagement Score","TotalVisits","Page Views Per Visit","Last Activity","Last Activity Date","Cityold","State","Country","Mobile Number"]]

newdata = newdata[((newdata['Lead Score']>0) & (newdata['Engagement Score']>0))]

"""# NOW WE WE WILL GET MOSTLY QULAIFIED LEADS WHICH

A qualified lead is a potential customer in the future, based on certain fixed criteria of your business requirements. Only willing leads are classified as qualified leads, meaning the information provided by the lead is given willingly and freely.
"""

newdata.tail(10)

newdata['Lead Source'].unique()

"""OUR LEADS MOSTLY COME FROM THESE SOURCES

"""

newdata_google = newdata[(newdata['Lead Source']=="Google")]
newdata_olarkchat = newdata[(newdata['Lead Source']=="Olark Chat")]
newdata_referal_sites = newdata[(newdata['Lead Source']=="Referral Sites")]
newdata_Reference = newdata[(newdata['Lead Source']=="Reference")]
newdata_welingak_website = newdata[(newdata['Lead Source']=="Welingak Website")]
newdata_facebook = newdata[(newdata['Lead Source']=="Facebook")]
newdata_socilamedia = newdata[(newdata['Lead Source']=="Social Media")]
newdata_welearn = newdata[(newdata['Lead Source']=="WeLearn")]
newdata_click2call = newdata[(newdata['Lead Source']=="Click2call")]
newdata_nan_values = newdata[(newdata['Lead Source']=="nan")]
newdata_NC_EDM = newdata[(newdata['Lead Source']=="NC_EDM")]
newdata_Directtraffic = newdata[(newdata['Lead Source']=="Direct Traffic")]

n1 = newdata_google['Lead Source'].count()
n2 = newdata_olarkchat['Lead Source'].count()
n3 = newdata_referal_sites['Lead Source'].count()
n4 = newdata_Reference['Lead Source'].count()
n5 = newdata_welingak_website['Lead Source'].count()
n6 = newdata_facebook['Lead Source'].count()
n7  = newdata_socilamedia['Lead Source'].count()
n8 = newdata_welearn['Lead Source'].count()
n9 = newdata_click2call['Lead Source'].count()
n10 = newdata_nan_values['Lead Source'].count()
n11 = newdata_NC_EDM['Lead Source'].count()
n12 = newdata_Directtraffic['Lead Source'].count()

Y = np.array([n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12])
mylabels = ["mydata_google","newdata_olarkchat","newdata_referal_sites","newdata_Reference","newdata_welingak_website","newdata_facebook","newdata_socilamedia","newdata_welearn","newdata_click2call","newdata_nan_values","newdata_NC_EDM","newdata_Directtraffic"]

"""from this data we can directly say that max leads are coming from 3 places : google, directtraffic, olakchart and reference """

plt.barh(mylabels , Y, align='center', data=None,height=1.0,)
plt.show()

newnumber = newdata[["Lead Source","Mobile Number"]]

"""*DUE TO PRIVACY REASON WE CANNOT SHOW THE MOBILE NO.*"""

newnumber.head(10)

"""here we have got the qulaified leads with their mobile no's and their id's

now using twilio account we can make calls using python
"""

newdata['Engagement Score'].unique()

"""form here we got that there is engagement score which ranges from 10 to 870 
so we can divide them using priority list 
"""

newdata['Engagement Score'].describe()

"""here we can see that min engagemnt score is 10 ,
ma score is 870

and 25% leads hae 20 score and 50% have 30 , 75% have 60 and so on
"""

# divide based on importance 
def important_leads(EngagementScore):
    if EngagementScore >= 60:
        return 'most important'
    elif EngagementScore >= 30:
        return 'important'
    else:
        return 'average'

newdata["important_leads"] = newdata['Engagement Score'].apply(important_leads)

based_on_importance = newdata[['Mobile Number',"important_leads"]]

"""#Contact leads easily from the application"""

based_on_importance.tail(10)

most_important = based_on_importance[(based_on_importance["important_leads"]=="most important")]
count1 = most_important["important_leads"].count()
most_important = based_on_importance[(based_on_importance["important_leads"]=="average")]
count2 = most_important["important_leads"].count()
most_important = based_on_importance[(based_on_importance["important_leads"]=="important")]
count3 = most_important["important_leads"].count()

new_array = np.array([count1,count2,count3])
new_labels = np.array(["most_important","important","average"])

plt.pie(new_array, labels = new_labels,radius=2)
plt.legend(title="Based on importance leads")

plt.show()

"""#Generate reports for this data. """

# now we can download this file based on importance in our excel
based_on_importance.to_csv('/bin/yespal_singh/based_on_importance.csv')
